#!/bin/bash

################################################################################
#   Brume, a lightweight static website manager
################################################################################


################################################################################
# Settings

OUTPUT="`git config --get brume.output | sed 's#/$##'`"
BUILDER="`git config --get brume.builder`"
POSTPROCESSOR="`git config --get brume.postprocessor`"
FEED_SITE="`git config --get brume.feed.site`"
FEED_FILE="`git config --get brume.feed.file`"
FEED_TITLE="`git config --get brume.feed.title`"
DATE_FMT="`git config --get brume.dateFormat`"

# Defaults
if [ -z "$OUTPUT" ];     then OUTPUT="`pwd`/www";            fi
if [ -z "$BUILDER" ];    then BUILDER="/bin/cp";             fi
if [ -z "$FEED_SITE" ];  then FEED_SITE="example.com";       fi
if [ -z "$FEED_FILE" ];  then FEED_FILE="changelog.atom";    fi
if [ -z "$FEED_TITLE" ]; then FEED_TITLE="Changelog for %s"; fi
if [ -z "$DATE_FMT" ];   then DATE_FMT="%FT%T%:z";           fi


################################################################################
# Utilities

html_escape () {
  sed -e 's/&/\&amp;/' -e 's/</\&lt;/' -e 's/>/\&gt;/'
}

git_commit_meta () {
  local field="$1" commit="$2"

  git log -1 $commit --pretty=format:"$field"
}

commit_meta_hash    () { git_commit_meta %H  $1; }
commit_meta_shash   () { git_commit_meta %h  $1; }
commit_meta_author  () { git_commit_meta %an $1; }
commit_meta_comment () { git_commit_meta %b  $1; }
commit_meta_subject () { git_commit_meta %s  $1; }
commit_meta_date    () { git_commit_meta %ai $1 | date -f - +"$DATE_FMT"; }
commit_meta_xmldate () { git_commit_meta %ai $1 | date -f - +"%FT%T%:z";  }

git_file_meta () {
  local field="$1" path="$2"

  git log -1 --pretty=format:"$field" -- $path
}

file_meta_hash    () { git_file_meta %H  $1; }
file_meta_shash   () { git_file_meta %h  $1; }
file_meta_author  () { git_file_meta %an $1; }
file_meta_comment () { git_file_meta %b  $1; }
file_meta_subject () { git_file_meta %s  $1; }
file_meta_date    () { git_file_meta %ai $1 | date -f - +"$DATE_FMT"; }
file_meta_xmldate () { git_file_meta %ai $1 | date -f - +"%FT%T%:z";  }

################################################################################
# Feed utility functions

build_feed () {
  cat > $OUTPUT/$FEED_FILE <<EOF
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>`printf $FEED_TITLE $FEED_SITE`</title>
  <link rel="self" type="application/atom+xml"
        href="http://$FEED_SITE/$FEED_FILE"/>
  <link rel="alternate" type="text/html"
        href="http://$FEED_SITE/"/>
  <updated>`file_meta_xmldate`</updated>
`build_feed_authors`
`build_feed_entries`
</feed>
EOF
}

build_feed_authors () {
  local match='\(\S\+\) <\(\S\+\)>'
  git shortlog -se | cut -f2 | sed "s/$match/\1 \2/" |
  while read name email; do
    cat <<EOF
  <author>
    <name>$name</name>
    <email>$email</email>
  </author>
EOF
  done
}

build_feed_entries () {
  local subject hash time comment

  for commit in `git log -n20 --pretty='%H'`; do
    subject="`commit_meta_subject $commit | html_escape`"
    hash="`commit_meta_hash $commit`"
    time="`commit_meta_xmldate $commit`"
    comment="`commit_meta_comment $commit | html_escape`"
    cat <<EOF
  <entry>
    <title>$subject</title>
    <id>$hash</id>
    <published>$time</published>
    <content type="text"><![CDATA[$comment]]></content>
  </entry>
EOF
  done
}


################################################################################
# Main
refs=`grep master - | cut -d' ' -f1,2`
ref_start=`echo $refs | cut -d' ' -f1`
ref_end=`echo $refs | cut -d' ' -f2`

TMP_DIR=`mktemp -d brume.XXXXXX`

echo "Checkout temp files [$TMP_DIR]"
GIT_WORK_TREE="$TMP_DIR" git checkout -f

echo "Apply changes"
if expr match $ref_start '0\{40\}' >/dev/null; then
  # First push, generate everything
  changes="`find $TMP_DIR/ | tail -n+2 | sed "s#^$TMP_DIR/##"`"
else
  range=$ref_start..$ref_end
  # Normal push, update modified files
  changes="`git diff --name-status $range | grep -E '^(A|M)' | cut -f2`"
  # Also, remove deleted files
  removals="`git diff --name-status $range | grep -E '^D' | cut -f2`"
fi

for file in $changes; do
  if [ -n "$file" ]; then
    if [ -f "$TMP_DIR/$file" ]; then
      echo "  $file -> $OUTPUT/$file"
      GIT_DIR="`pwd`" BRUME_FILE="$file" $BUILDER $TMP_DIR/$file $OUTPUT/$file
    elif [ -d "$TMP_DIR/$file" ]; then
      echo "  mkdir $file"
      mkdir -p $OUTPUT/$file
    fi
  fi
done

for file in $removals; do
  if [ -n "$file" ]; then
    echo "  rm $OUTPUT/$file"
    rm $OUTPUT/$file
  fi
done

echo "Generate changelog"
build_feed

if [ -n "$POSTPROCESSOR" ]; then
  GIT_DIR="`pwd`" $POSTPROCESSOR $OUTPUT
fi

echo "Cleaning"
rm -rf $TMP_DIR
